map $sent_http_content_type $expires {
    "text/html" epoch;
    "text/html; charset=utf-8" epoch;
    default off;
}

# Lua settings for OpenID
lua_package_path '~/lua/?.lua;;';
resolver 8.8.8.8;
lua_ssl_trusted_certificate /etc/ssl/jurassicjs.eu/fullchain.pem;
lua_ssl_verify_depth 5;
# cache for discovery metadata documents
lua_shared_dict discovery 1m;
# cache for JWKs
lua_shared_dict jwks 1m;


server {
    listen 80;
    listen 443 ssl;

    server_name jurassicjs.eu;

    ssl_certificate /etc/ssl/jurassicjs.eu/fullchain.pem;
    ssl_certificate_key /etc/ssl/jurassicjs.eu/privkey.pem;

    root /var/www/html/nuxt-app;
    index index.html;

    charset utf-8;
    client_max_body_size 100M;

    gzip on;
    gzip_types text/plain application/xml text/css application/javascript;
    gzip_min_length 1000;

    location / {

        access_by_lua_block {

            local opts = {
                redirect_uri = "https://tapp.docker:9004/auth/login/callback",
                discovery = "http://oidc.docker:9025/oidc/.well-known/openid-configuration",
                client_id = "oidcCLIENT",
                client_secret = "Some_super_secret",
            }

            -- call authenticate for OpenID Connect user authentication
            local res, err = require("resty.openidc").authenticate(opts)

            if err then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            -- at this point res is a Lua table with 3 keys:
            -- id_token : a Lua table with the claims from the id_token (required)
            -- access_token: the access token (optional)
            -- user : a Lua table with the claims returned from the user info endpoint (optional)

            --if res.id_token.hd ~= "zmartzone.eu" then
            -- ngx.exit(ngx.HTTP_FORBIDDEN)
            --end

            --if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
            -- ngx.exit(ngx.HTTP_FORBIDDEN)
            --end

            -- set headers with user info: this will overwrite any existing headers
            -- but also scrub(!) them in case no value is provided in the token
            ngx.req.set_header("X-USER", res.id_token.sub)
        }

        expires $expires;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_read_timeout 1m;
        proxy_connect_timeout 1m;
        proxy_pass http://my-nodejs:3000; # set the address of the Node.js
    }

    location /_nuxt/hmr/ {
        proxy_pass http://my-nodejs:24678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    access_log off;

}
